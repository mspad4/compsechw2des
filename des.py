#!/usr/bin/env python3
import sys
import textwrap

#creates the 56 bit permuted key
def permute(k):
    order = [57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4]
    pk = []
    for o in order:
        pk.append(k[o-1])
    return pk

#shifts the list l by n left
def left_shift(l, n):
    return l[n:] + l[:n]

#creates the 16 cs and ds
def create_cds(cs, ds):
    #n left shifts per round
    lfs = [1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1]
    for i in range(1, len(lfs)+1):
        cs.append(left_shift(cs[i-1], lfs[i-1]))
        ds.append(left_shift(ds[i-1], lfs[i-1]))

    #combines cs and ds
    cds = []
    for i in range(17):
        cds.append(cs[i] + ds[i])
    #print(cds)
    return cds
    
#permutes each of the concatenated c d
def permute_cds(cds):
    cd_o  = [14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32]
    p_cds = []
    for c in cds:
        cd = []
        for n in cd_o:
            cd.append(c[n-1])
        p_cds.append(cd)
   # print(p_cds)
    return p_cds


#initial permutation of the ciphetext
def initial_perm(c):
    ip_o = [58 ,50 ,42 ,34 ,26 ,18 ,10 ,2,60 ,52 ,44 ,36 ,28 ,20 ,12 ,4,62,54 ,46 ,38 ,30 ,22 ,14 ,6,64 ,56 ,48 ,40 ,32 ,24 ,16 ,8,57 ,49 ,41 ,33 ,25 ,17 ,9,1,59 ,51 ,43 ,35 ,27 ,19 ,11 ,3,61 ,53 ,45 ,37 ,29 ,21 ,13 ,5,63 ,55 ,47 ,39 ,31 ,23 ,15 ,7]
    ip = []
    for o in ip_o:
        ip.append(c[o-1])
    return ip


#compute the E function to extend 32 bits 
def e_func(r):
    e_o = [32,1 ,2 ,3 ,4 ,5,4 ,5 ,6 ,7 ,8 ,9,8 ,9 ,10,11 ,12 ,13,12 ,13 ,14 ,15 ,16 ,17,16 ,17 ,18 ,19 ,20 ,21,20 ,21 ,22 ,23 ,24 ,25,24 ,25 ,26 ,27 ,28 ,29,28 ,29 ,30 ,31 ,32 ,1]
    r_e = []
    for o in e_o:
        r_e.append(r[o-1])
    return r_e
    
#compute the xor of the r and k
def xor(r, k):
    res = []
    for i in range(len(k)):
        if k[i] == r[i]:
            res.append('0')
        else:
            res.append('1')
    return res

#performs the f function
def f_func(r, k):
    e_r = e_func(r)
    x_c = xor(e_r, k)
    s_b =  s_boxes(x_c)
    return p_sboxes(s_b)


#performs the 32 bit permutation
def p_sboxes(s):
    p_s = []
    s_o = [16,7,20,21,29,12,28,17,1,15,23,26,5,18,31,10,2,8,24,14,32,27,3,9,19,13,30,6,22,11,4,25]
    for i in s_o:
        p_s.append(s[i-1])
    return p_s
    

#performs the decrpytion
def decrypt(keysl, ls, rs):
    #print(len(keysl))

    print("Output of f function in each iteration:")
    for i in range(1,17):
        ls.append(rs[i-1])
        #rs.append(xor(ls[i-1], f_func(rs[i-1], keysl[16-i])))
        rs.append(xor(ls[i-1], f_func(rs[i-1], keysl[17-i])))
        print(f'Iteration {i}: {"".join(f_func(rs[i-1], keysl[17-i]))}')

    #print LnRn
    print("")
    for i in range(1,len(rs)):
        print(f'L{i}R{i} is {"".join(ls[i]+rs[i])}')

    f_64bit = rs[-1] + ls[-1]
    ip_f = ipneg(f_64bit)
    print("")
    print("Decrypted message:")
    print(''.join(ip_f))

#get the final inverse permutation
def ipneg(f):
    f_o = [40 ,8 ,48 ,16 ,56 ,24 ,64 ,32,39 ,7 ,47 ,15 ,55 ,23 ,63 ,31,38 ,6 ,46 ,14 ,54 ,22 ,62 ,30,37 ,5 ,45 ,13 ,53 ,21 ,61 ,29,36 ,4 ,44 ,12 ,52 ,20 ,60 ,28,35 ,3 ,43 ,11 ,51 ,19 ,59 ,27,34 ,2 ,42 ,10 ,50 ,18 ,58 ,26,33 ,1 ,41 ,9 ,49 ,17 ,57 ,25]
    f_final = []
    for i in f_o:
        f_final.append(f[i-1])
    return f_final

#s box transformation
def s_boxes(erk):

    #sorry these were as painful to write as they are taking space here
    #I just use vs code to shrink them
    S1 = {
"00": {"0000": "1110", "0001": "0100", "0010": "1101", "0011": "0001", "0100": "0010", "0101": "1111", "0110": "1011", "0111":"1000", "1000":"0011", "1001":"1010", "1010":"0110", "1011":"1100", "1100": "0101", "1101":"1001", "1110":"0000", "1111":"0111"},
 "01": {"0000": "0000", "0001": "1111", "0010": "0111", "0011": "0100", "0100": "1110", "0101": "0010", "0110": "1101", "0111":"0001", "1000":"1010", "1001":"0110", "1010":"1100", "1011":"1011", "1100": "1001", "1101":"0101", "1110":"0011", "1111":"1000"},
 "10": {"0000": "0100", "0001": "0001", "0010": "1110", "0011": "1000", "0100": "1101", "0101": "0110", "0110": "0010", "0111":"1011", "1000":"1111", "1001":"1100", "1010":"1001", "1011":"0111", "1100": "0011", "1101":"1010", "1110":"0101", "1111":"0000"},
 "11": {"0000": "1111", "0001": "1100", "0010": "1000", "0011": "0010", "0100": "0100", "0101": "1001", "0110": "0001", "0111":"0111", "1000":"0101", "1001":"1011", "1010":"0011", "1011":"1110", "1100": "1100", "1101":"0000", "1110":"0110", "1111":"1101"} }

    S2 = {
    "00": {
        "0000": "1111", "0001": "0001", "0010": "1000", "0011": "1110",
        "0100": "0110", "0101": "1011", "0110": "0011", "0111": "0100",
        "1000": "1001", "1001": "0111", "1010": "0010", "1011": "1101",
        "1100": "1100", "1101": "0000", "1110": "0101", "1111": "1010"
    },
    "01": {
        "0000": "0011", "0001": "1101", "0010": "0100", "0011": "0111",
        "0100": "1111", "0101": "0010", "0110": "1000", "0111": "1110",
        "1000": "1100", "1001": "0000", "1010": "0001", "1011": "1010",
        "1100": "0110", "1101": "1001", "1110": "1011", "1111": "0101"
    },
    "10": {
        "0000": "0000", "0001": "1110", "0010": "0111", "0011": "1011",
        "0100": "1010", "0101": "0100", "0110": "1101", "0111": "0001",
        "1000": "0101", "1001": "1000", "1010": "1100", "1011": "0110",
        "1100": "1001", "1101": "0011", "1110": "0010", "1111": "1111"
    },
    "11": {
        "0000": "1101", "0001": "1000", "0010": "1010", "0011": "0001",
        "0100": "0011", "0101": "1111", "0110": "0100", "0111": "0010",
        "1000": "1011", "1001": "0110", "1010": "0111", "1011": "1100",
        "1100": "0000", "1101": "0101", "1110": "1110", "1111": "1001"
    }
}
    S3 = {
    "00": {
        "0000": "1010", "0001": "0000", "0010": "1001", "0011": "1110",
        "0100": "0110", "0101": "0011", "0110": "1111", "0111": "0101",
        "1000": "0001", "1001": "1101", "1010": "1100", "1011": "0111",
        "1100": "1011", "1101": "0100", "1110": "0010", "1111": "1000"
    },
    "01": {
        "0000": "1101", "0001": "0111", "0010": "0000", "0011": "1001",
        "0100": "0011", "0101": "0100", "0110": "0110", "0111": "1010",
        "1000": "0010", "1001": "1000", "1010": "0101", "1011": "1110",
        "1100": "1100", "1101": "1011", "1110": "1111", "1111": "0001"
    },
    "10": {
        "0000": "1101", "0001": "0110", "0010": "0100", "0011": "1001",
        "0100": "1000", "0101": "1111", "0110": "0011", "0111": "0000",
        "1000": "1011", "1001": "0001", "1010": "0010", "1011": "1100",
        "1100": "0101", "1101": "1010", "1110": "1110", "1111": "0111"
    },
    "11": {
        "0000": "0001", "0001": "1010", "0010": "1101", "0011": "0000",
        "0100": "0110", "0101": "1001", "0110": "1000", "0111": "0111",
        "1000": "0100", "1001": "1111", "1010": "1110", "1011": "0011",
        "1100": "1011", "1101": "0101", "1110": "0010", "1111": "1100"
    }
}
    S4 = {
    "00": {
        "0000": "0111", "0001": "1101", "0010": "1110", "0011": "0011",
        "0100": "0000", "0101": "0110", "0110": "1001", "0111": "1010",
        "1000": "0001", "1001": "0010", "1010": "1000", "1011": "0101",
        "1100": "1011", "1101": "1100", "1110": "0100", "1111": "1111"
    },
    "01": {
        "0000": "1101", "0001": "1000", "0010": "1011", "0011": "0101",
        "0100": "0110", "0101": "1111", "0110": "0000", "0111": "0011",
        "1000": "0100", "1001": "0111", "1010": "0010", "1011": "1100",
        "1100": "0001", "1101": "1010", "1110": "1110", "1111": "1001"
    },
    "10": {
        "0000": "1010", "0001": "0110", "0010": "1001", "0011": "0000",
        "0100": "1100", "0101": "1011", "0110": "0111", "0111": "1101",
        "1000": "1111", "1001": "0001", "1010": "0011", "1011": "1110",
        "1100": "0101", "1101": "0010", "1110": "1000", "1111": "0100"
    },
    "11": {
        "0000": "0011", "0001": "1111", "0010": "0000", "0011": "0110",
        "0100": "1010", "0101": "0001", "0110": "1101", "0111": "1000",
        "1000": "1001", "1001": "0100", "1010": "0101", "1011": "1011",
        "1100": "1100", "1101": "0111", "1110": "0010", "1111": "1110"
    }
}
    S5 = {
    "00": {
        "0000": "0010", "0001": "1100", "0010": "0100", "0011": "0001",
        "0100": "0111", "0101": "1010", "0110": "1011", "0111": "0110",
        "1000": "1000", "1001": "0101", "1010": "0011", "1011": "1111",
        "1100": "1101", "1101": "0000", "1110": "1110", "1111": "1001"
    },
    "01": {
        "0000": "1110", "0001": "1011", "0010": "0010", "0011": "1100",
        "0100": "0100", "0101": "0111", "0110": "1101", "0111": "0001",
        "1000": "0101", "1001": "0000", "1010": "1111", "1011": "1010",
        "1100": "0011", "1101": "1001", "1110": "1000", "1111": "0110"
    },
    "10": {
        "0000": "0100", "0001": "0010", "0010": "0001", "0011": "1011",
        "0100": "1010", "0101": "1101", "0110": "0111", "0111": "1000",
        "1000": "1111", "1001": "1001", "1010": "1100", "1011": "0101",
        "1100": "0110", "1101": "0011", "1110": "0000", "1111": "1110"
    },
    "11": {
        "0000": "1011", "0001": "1000", "0010": "1100", "0011": "0111",
        "0100": "0001", "0101": "1110", "0110": "0010", "0111": "1101",
        "1000": "0110", "1001": "1111", "1010": "0000", "1011": "1001",
        "1100": "1010", "1101": "0100", "1110": "0101", "1111": "0011"
    }
}
    S6 = {
    "00": {
        "0000": "1100", "0001": "0001", "0010": "1010", "0011": "1111",
        "0100": "1001", "0101": "0010", "0110": "0110", "0111": "1000",
        "1000": "0000", "1001": "1101", "1010": "0011", "1011": "0100",
        "1100": "1110", "1101": "0111", "1110": "0101", "1111": "1011"
    },
    "01": {
        "0000": "1010", "0001": "1111", "0010": "0100", "0011": "0010",
        "0100": "0111", "0101": "1100", "0110": "1001", "0111": "0101",
        "1000": "0110", "1001": "0001", "1010": "1101", "1011": "1110",
        "1100": "0000", "1101": "1011", "1110": "0011", "1111": "1000"
    },
    "10": {
        "0000": "1001", "0001": "1110", "0010": "1111", "0011": "0101",
        "0100": "0010", "0101": "1000", "0110": "1100", "0111": "0011",
        "1000": "0111", "1001": "0000", "1010": "0100", "1011": "1010",
        "1100": "0001", "1101": "1101", "1110": "1011", "1111": "0110"
    },
    "11": {
        "0000": "0100", "0001": "0011", "0010": "0010", "0011": "1100",
        "0100": "1001", "0101": "0101", "0110": "1111", "0111": "1010",
        "1000": "1011", "1001": "1110", "1010": "0001", "1011": "0111",
        "1100": "0110", "1101": "0000", "1110": "1000", "1111": "1101"
    }
}
    S7 = {
    "00": {
        "0000": "0100", "0001": "1011", "0010": "0010", "0011": "1110",
        "0100": "1111", "0101": "0000", "0110": "1000", "0111": "1101",
        "1000": "0011", "1001": "1100", "1010": "1001", "1011": "0111",
        "1100": "0101", "1101": "1010", "1110": "0110", "1111": "0001"
    },
    "01": {
        "0000": "1101", "0001": "0000", "0010": "1011", "0011": "0111",
        "0100": "0100", "0101": "1001", "0110": "0001", "0111": "1010",
        "1000": "1110", "1001": "0011", "1010": "0101", "1011": "1100",
        "1100": "0010", "1101": "1111", "1110": "1000", "1111": "0110"
    },
    "10": {
        "0000": "0001", "0001": "0100", "0010": "1011", "0011": "1101",
        "0100": "1100", "0101": "0011", "0110": "0111", "0111": "1110",
        "1000": "1010", "1001": "1111", "1010": "0110", "1011": "1000",
        "1100": "0000", "1101": "0101", "1110": "1001", "1111": "0010"
    },
    "11": {
        "0000": "0110", "0001": "1011", "0010": "1101", "0011": "1000",
        "0100": "0001", "0101": "0100", "0110": "1010", "0111": "0111",
        "1000": "1001", "1001": "0101", "1010": "0000", "1011": "1111",
        "1100": "1110", "1101": "0010", "1110": "0011", "1111": "1100"
    }
}
    S8 = {
    "00": {
        "0000": "1101", "0001": "0010", "0010": "1000", "0011": "0100",
        "0100": "0110", "0101": "1111", "0110": "1011", "0111": "0001",
        "1000": "1010", "1001": "1001", "1010": "0011", "1011": "1110",
        "1100": "0101", "1101": "0000", "1110": "1100", "1111": "0111"
    },
    "01": {
        "0000": "0001", "0001": "1111", "0010": "1101", "0011": "1000",
        "0100": "1010", "0101": "0011", "0110": "0111", "0111": "0100",
        "1000": "1100", "1001": "0101", "1010": "0110", "1011": "1011",
        "1100": "0000", "1101": "1110", "1110": "1001", "1111": "0010"
    },
    "10": {
        "0000": "0111", "0001": "1011", "0010": "0100", "0011": "0001",
        "0100": "1001", "0101": "1100", "0110": "1110", "0111": "0010",
        "1000": "0000", "1001": "0110", "1010": "1010", "1011": "1101",
        "1100": "1111", "1101": "0011", "1110": "0101", "1111": "1000"
    },
    "11": {
        "0000": "0010", "0001": "0001", "0010": "1110", "0011": "0111",
        "0100": "0100", "0101": "1010", "0110": "1000", "0111": "1101",
        "1000": "1111", "1001": "1100", "1010": "1001", "1011": "0000",
        "1100": "0011", "1101": "0101", "1110": "0110", "1111": "1011"
    }
}

    split_erk = textwrap.wrap(''.join(erk), 6)
    resl = []
    i = 0
    for s in split_erk:
        i += 1
        fl = s[0] + s[-1]
        mid = s[1:-1]
        #print(fl, mid)
        if i == 1:
            resl.append(S1[fl][mid])
        elif i == 2:
            resl.append(S2[fl][mid])
        elif i == 3:
            resl.append(S3[fl][mid])
        elif i == 4:
            resl.append(S4[fl][mid])
        elif i == 5:
            resl.append(S5[fl][mid])
        elif i == 6:
            resl.append(S6[fl][mid])
        elif i == 7:
            resl.append(S7[fl][mid])
        elif i == 8:
            resl.append(S8[fl][mid])
       
    #print(resl)
    return ''.join(resl)
    

def main():

    #get the key and ciphertext
    print("Please enter the key and ciphertext following as binary numbers with no spaces")
    key = input("enter the key: ")
    ciphertext = input("enter ciphertext: ")
    
    #generate the 16 keys
    round_keys = []
    permuted_key = permute(key)
    c0 = permuted_key[:28]
    d0 = permuted_key[28:]
    cs = []
    cs.append(c0)
    ds = []
    ds.append(d0)
    cds = create_cds(cs, ds)
    
    p_cds = permute_cds(cds)
    print("Printing each key:")
    for n, i in enumerate(p_cds[1:]):
        print(f'Key {n+1}: {"".join(i)}')
    print("")




    #initial permutation of ciphertext
    ip = initial_perm(ciphertext)
    #print(len(ip))
    ls = []
    rs = []
    l0 = ip[:32]
    r0 = ip[32:]
    ls.append(l0)
    rs.append(r0)

    decrypt(p_cds, ls, rs)


if __name__ == '__main__':
    main()

